"""
Django settings for polarrouteserver project.

Generated by 'django-admin startproject' using Django 5.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import crypt
import logging
import os
import uuid

from pathlib import Path
from celery.schedules import crontab

logger = logging.getLogger(__name__)

BASE_DIR = os.getenv("BASE_DIR", os.getcwd())
MESH_PATH = os.getenv("POLARROUTE_MESH_PATH", os.path.join(".", "mesh.json"))
MESH_DIR = os.getenv("POLARROUTE_MESH_DIR", os.path.join(".", "mesh"))

# NOTE: set this in production
SECRET_KEY = os.getenv("SECRET_KEY", str(uuid.uuid4()))
DEBUG = bool(os.getenv("DEBUG", "False"))

ALLOWED_HOSTS = [
    "localhost",
    "0.0.0.0",
]
if os.getenv("POLARROUTE_ALLOWED_HOSTS") is not None:
    ALLOWED_HOSTS.extend(os.getenv("POLARROUTE_ALLOWED_HOSTS"))

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "root": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": True,
        },
    },
}

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_results",
    "django_celery_beat",
    "polarrouteserver.route_api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "polarrouteserver.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "polarrouteserver.wsgi.application"

# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = "en-gb"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery settings
CELERY_WORKER_HIJACK_ROOT_LOGGER = True
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "amqp://guest:guest@localhost")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "django-db")
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BEAT_SCHEDULE = {
    "sample_task": {
        "task": "route_api.tasks.import_new_meshes",
        "schedule": crontab(minute="*/10"),
    },
}

# Routing settings (TODO: hardcoded, can / should these be exposed elsewhere?)
WAYPOINT_DISTANCE_TOLERANCE = 1  # Nautical Miles

# For now, vessel config is used in the pipeline to calculate a vessel mesh
# VESSEL_CONFIG =  {
#        "vessel_type": "SDA",
#        "max_speed": 30,
#        "unit": "km/hr",
#        "beam": 10,
#        "hull_type": "slender",
#        "force_limit": 100000,
#        "max_ice_conc": 80,
#        "min_depth": 10
# }
base_routeplanner_config = {
    "path_variables": ["fuel", "traveltime"],
    "vector_names": ["uC", "vC"],
    "zero_currents": False,
    "variable_speed": True,
    "time_unit": "days",
    "early_stopping_criterion": True,
    "save_dijkstra_graphs": True,
    "waypoint_splitting": False,  # switched off until antarctica/polarroute/issues#303 is resolved
    "smooth_path": {"max_iteration_number": 1000, "minimum_difference": 0.0005},
    "smoothing_max_iterations": 100,
    "smoothing_merge_separation": 1e-3,
    "smoothing_converged_sep": 1e-3,
}
TRAVELTIME_CONFIG = base_routeplanner_config | {"objective_function": "traveltime"}
FUEL_CONFIG = base_routeplanner_config | {"objective_function": "fuel"}
